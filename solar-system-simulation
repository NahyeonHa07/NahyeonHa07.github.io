# solar_system_simulation.py
"""
Solar System Simulation using Pygame

This project simulates the motion of planets in the Solar System
with gravitational interactions. Users can visualize planet orbits,
velocity, distance from the Sun, and interactively move the view.

Controls:
- Arrow keys or mouse drag: Move the view
- Scroll wheel: Zoom in/out
- Space: Pause/resume simulation
- D: Toggle display of distances
- C: Toggle orbit lines
- S: Reset view
- ESC: Quit simulation
"""

import pygame
import math

# -------------------------------
# 1. Initialize Pygame
# -------------------------------
pygame.init()
WIDTH, HEIGHT = pygame.display.Info().current_w, pygame.display.Info().current_h
WINDOW = pygame.display.set_mode((0, 0), pygame.FULLSCREEN)
pygame.display.set_caption("Solar System Simulation")

# Colors
COLOR_BLACK = (0, 0, 0)
COLOR_WHITE = (255, 255, 255)
COLOR_SUN = (255, 165, 0)
COLOR_MERCURY = (169, 169, 169)
COLOR_VENUS = (255, 165, 0)
COLOR_EARTH = (135, 206, 235)
COLOR_MARS = (255, 69, 0)
COLOR_JUPITER = (222, 184, 135)
COLOR_SATURN = (220, 220, 220)
COLOR_URANUS = (175, 238, 238)
COLOR_NEPTUNE = (65, 105, 225)

# Fonts
FONT_1 = pygame.font.SysFont("Trebuchet MS", 21)
FONT_2 = pygame.font.SysFont("Trebuchet MS", 16)

# -------------------------------
# 2. Constants
# -------------------------------
AU = 149.6e6 * 1000       # Astronomical unit in meters
G = 6.67428e-11           # Gravitational constant
TIMESTEP = 60*60*24*2     # Two days per iteration
SCALE = 200 / AU          # Scale for drawing

# -------------------------------
# 3. Planet class
# -------------------------------
class Planet:
    def __init__(self, x, y, radius, color, mass, sun=False):
        """Initialize a planet with position, radius, color, mass, and optional sun flag"""
        self.x = x
        self.y = y
        self.radius = radius
        self.color = color
        self.mass = mass
        self.sun = sun
        self.orbit = []
        self.distance_to_sun = 0
        self.x_vel = 0
        self.y_vel = 0

    def draw(self, window, show_distance=True, move_x=0, move_y=0, draw_line=True):
        """Draw the planet and optionally its orbit and distance from Sun"""
        x = self.x * SCALE + WIDTH / 2 + move_x
        y = self.y * SCALE + HEIGHT / 2 + move_y
        
        # Draw orbit line
        if draw_line and len(self.orbit) > 2:
            updated_points = []
            for point in self.orbit:
                px, py = point
                px = px * SCALE + WIDTH / 2 + move_x
                py = py * SCALE + HEIGHT / 2 + move_y
                updated_points.append((px, py))
            pygame.draw.lines(window, self.color, False, updated_points, 1)
        
        # Draw planet
        pygame.draw.circle(window, self.color, (int(x), int(y)), self.radius)
        
        # Draw distance
        if show_distance and not self.sun:
            distance_text = FONT_2.render(
                f"{round(self.distance_to_sun * 1.057e-16, 8)} light years", True, COLOR_WHITE
            )
            window.blit(distance_text, (x - distance_text.get_width()/2, y - distance_text.get_height()/2 - 20))

    def attraction(self, other):
        """Compute gravitational force from another planet"""
        other_x, other_y = other.x, other.y
        distance_x = other_x - self.x
        distance_y = other_y - self.y
        distance = math.sqrt(distance_x**2 + distance_y**2)
        
        if other.sun:
            self.distance_to_sun = distance
        
        force = G * self.mass * other.mass / distance**2
        theta = math.atan2(distance_y, distance_x)
        force_x = math.cos(theta) * force
        force_y = math.sin(theta) * force
        return force_x, force_y

    def update_position(self, planets):
        """Update planet position based on gravitational attraction"""
        total_fx = total_fy = 0
        for planet in planets:
            if self == planet:
                continue
            fx, fy = self.attraction(planet)
            total_fx += fx
            total_fy += fy
        self.x_vel += total_fx / self.mass * TIMESTEP
        self.y_vel += total_fy / self.mass * TIMESTEP
        self.x += self.x_vel * TIMESTEP
        self.y += self.y_vel * TIMESTEP
        self.orbit.append((self.x, self.y))

# -------------------------------
# 4. Main simulation
# -------------------------------
def main():
    run = True
    pause = False
    show_distance = True
    draw_line = True
    move_x = move_y = 0
    clock = pygame.time.Clock()

    # Create planets (example values, you can refine with NASA data)
    sun = Planet(0, 0, 30, COLOR_SUN, 1.98892e30, sun=True)
    earth = Planet(-1*AU, 0, 16, COLOR_EARTH, 5.9742e24)
    earth.y_vel = 29.783e3  # m/s
    planets = [sun, earth]

    while run:
        clock.tick(60)
        WINDOW.fill(COLOR_BLACK)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False

        keys = pygame.key.get_pressed()
        if keys[pygame.K_ESCAPE]:
            run = False

        # Update planet positions
        if not pause:
            for planet in planets:
                planet.update_position(planets)

        # Draw planets
        for planet in planets:
            planet.draw(WINDOW, show_distance, move_x, move_y, draw_line)

        pygame.display.update()

    pygame.quit()

if __name__ == "__main__":
    main()
